`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.06.2025 00:36:01
// Design Name: 
// Module Name: tb_dpram_tsn
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////



`timescale 1ns / 1ps

module tb_dpram_tsn;

    reg clk = 0;
    reg rst_n = 0;
    reg wr_en = 0;
    reg [7:0] wr_data = 0;
    wire dpram_full;

    reg rd_en = 0;
    wire [7:0] rd_data;
    wire frame_ready;
    wire is_tsn_frame;
    wire [2:0] pcp_out;
    wire [2:0] tsn_protocol_type;

    wire [7:0] buf0, buf1, buf2, buf3, buf4, buf5, buf6, buf7;

    dpram_tsn_top uut (
        .clk(clk),
        .rst_n(rst_n),
        .wr_en(wr_en),
        .wr_data(wr_data),
        .dpram_full(dpram_full),
        .rd_en(rd_en),
        .rd_data(rd_data),
        .frame_ready(frame_ready),
        .is_tsn_frame(is_tsn_frame),
        .pcp_out(pcp_out),
        .tsn_protocol_type(tsn_protocol_type),
        .buf0(buf0), .buf1(buf1), .buf2(buf2), .buf3(buf3),
        .buf4(buf4), .buf5(buf5), .buf6(buf6), .buf7(buf7)
    );

    always #5 clk = ~clk;

    task send_frame_16;
        input [7:0] b0, b1, b2, b3, b4, b5;
        input [7:0] b6, b7, b8, b9, b10, b11;
        input [7:0] ethertype_hi, ethertype_lo;
        input [7:0] pcp_byte;
        input [7:0] payload_byte;
        begin
            @(posedge clk); wr_en = 1; wr_data = b0;
            @(posedge clk); wr_data = b1;
            @(posedge clk); wr_data = b2;
            @(posedge clk); wr_data = b3;
            @(posedge clk); wr_data = b4;
            @(posedge clk); wr_data = b5;
            @(posedge clk); wr_data = b6;
            @(posedge clk); wr_data = b7;
            @(posedge clk); wr_data = b8;
            @(posedge clk); wr_data = b9;
            @(posedge clk); wr_data = b10;
            @(posedge clk); wr_data = b11;
            @(posedge clk); wr_data = ethertype_hi;
            @(posedge clk); wr_data = ethertype_lo;
            @(posedge clk); wr_data = pcp_byte;
            @(posedge clk); wr_data = payload_byte;
            @(posedge clk); wr_en = 0;
        end
    endtask

    task read_frame_check;
        begin
            wait(frame_ready == 1);
            @(posedge clk); rd_en = 1;
            repeat(17) @(posedge clk);
            rd_en = 0;
            #10;
            $display("TSN Detected = %b | Protocol = %0d | PCP = %0d | Routed Payload = %h",
                     is_tsn_frame, tsn_protocol_type, pcp_out,
                     (pcp_out == 0) ? buf0 :
                     (pcp_out == 1) ? buf1 :
                     (pcp_out == 2) ? buf2 :
                     (pcp_out == 3) ? buf3 :
                     (pcp_out == 4) ? buf4 :
                     (pcp_out == 5) ? buf5 :
                     (pcp_out == 6) ? buf6 : buf7);
        end
    endtask

    initial begin
        $monitor("Time = %0t | Protocol = %0d | Buffers = {%h %h %h %h %h %h %h %h}",
                 $time, tsn_protocol_type, buf0, buf1, buf2, buf3, buf4, buf5, buf6, buf7);

        rst_n = 0;
        #20; rst_n = 1;
    // Frame 1: TSN, PCP = 3, payload = AB
        send_frame_16(8'hAA,8'hBB,8'hCC,8'hDD,8'hEE,8'h01,
                      8'h02,8'h03,8'h04,8'h05,8'h06,8'h07,
                      8'h81, 8'h00, 8'b01100000, 8'hAB);
        read_frame_check();

        // Frame 2: non-TSN
        send_frame_16(8'h11,8'h22,8'h33,8'h44,8'h55,8'h66,
                      8'h77,8'h88,8'h99,8'hAA,8'hBB,8'hCC,
                      8'h08, 8'h00, 8'b10100000, 8'hCD);
        read_frame_check();
        
     

        // Frame 3: TSN, PCP = 7, payload = 99
        send_frame_16(8'h11,8'h22,8'h33,8'h44,8'h55,8'h66,
                      8'h77,8'h88,8'h99,8'hAA,8'hBB,8'hCC,
                      8'h22, 8'hF0, 8'b11100000, 8'h90);
        read_frame_check();
        
        send_frame_16(8'h11,8'h22,8'h33,8'h44,8'h55,8'h66,
                      8'h77,8'h88,8'h99,8'hAA,8'hBB,8'hCC,
                      8'h08, 8'h00, 8'b00100000, 8'h69);
        read_frame_check();
           send_frame_16(8'h11,8'h22,8'h33,8'h44,8'h55,8'h66,
                      8'h77,8'h88,8'h99,8'hAA,8'hBB,8'hCC,
                      8'h81, 8'h00, 8'b00000000, 8'h99);
                      read_frame_check();
                      
                      send_frame_16(8'h11,8'h22,8'h33,8'h44,8'h55,8'h66,
                      8'h77,8'h88,8'h99,8'hAA,8'hBB,8'hCC,
                      8'h88, 8'hF7, 8'b01000000, 8'hFF);
        
        
        read_frame_check();
        
                   send_frame_16(8'h11,8'h22,8'h33,8'h44,8'h55,8'h66,
                      8'h77,8'h88,8'h99,8'hAA,8'hBB,8'hCC,
                      8'h22, 8'hF0, 8'b10100000, 8'h00);
        read_frame_check();

send_frame_16(8'h11,8'h22,8'h33,8'h44,8'h55,8'h66,
                      8'h77,8'h88,8'h99,8'hAA,8'hBB,8'hCC,
                      8'h81, 8'hF0, 8'b00100000, 8'h99);
        read_frame_check();

        $finish;
    end

endmodule

